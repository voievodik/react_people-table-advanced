{"version":3,"sources":["utils/constants.ts","utils/utils.ts","components/Navbar.tsx","App.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleTable.tsx","types/Gender.ts","components/PeopleFilters.tsx","pages/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["FEMALE_SEX","tableColumnNames","getLinkClass","isActive","classnames","hasIncludeQuery","name","query","normalizedQuery","toLowerCase","includes","Navbar","className","role","to","App","HomePage","NotFoundPage","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","slug","sex","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","sortTableColumnNames","PeopleTable","people","personSlug","useParams","sort","get","order","map","newSortType","born","died","fatherName","motherName","mother","father","Gender","PeopleFilters","setSeacrhParams","centuries","getAll","All","Male","Female","type","placeholder","onChange","event","target","century","selectedNumber","filter","PeoplePage","useState","isLoading","setIsLoading","isErrorHappened","setIsErrorHappened","setPeople","useLocation","useEffect","getPeople","peopleFromServer","personData","persons","find","getMotherPerson","getFatherPerson","catch","finally","isPeopleNotExist","length","preparedPeople","numberOfCentury","Math","ceil","a","b","localeCompare","reverse","getFilteredPeople","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.8aced8fe.chunk.js","sourcesContent":["export const NOT_SET_VALUE = '-';\nexport const FEMALE_SEX = 'f';\nexport const MALE_SEX = 'm';\nexport const tableColumnNames = [\n  'Name', 'Sex', 'Born', 'Died', 'Mother', 'Father',\n];\nexport const centuries = [\n  16, 17, 18, 19, 20,\n];\n","import classnames from 'classnames';\nimport { Person } from '../types';\nimport { FEMALE_SEX, MALE_SEX } from './constants';\n\nexport function getFatherPerson(persons: Person[], person: Person) {\n  return persons.find(({ sex, name }: Person) => sex === MALE_SEX\n    && name === person.fatherName);\n}\n\nexport function getMotherPerson(persons: Person[], person: Person) {\n  return persons.find(({ sex, name }: Person) => sex === FEMALE_SEX\n    && name === person.motherName);\n}\n\nexport const getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classnames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n};\n\nexport const hasIncludeQuery = (name: string, query: string) => {\n  const normalizedQuery = query.toLowerCase();\n\n  return name.toLowerCase().includes(normalizedQuery);\n};\n","import { NavLink } from 'react-router-dom';\nimport { getLinkClass } from '../utils/utils';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n\n  </div>\n);\n","export const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n","export const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n","import { Person } from './types/Person';\r\n\r\n// eslint-disable-next-line max-len\r\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\r\n\r\nfunction wait(delay: number) {\r\n  return new Promise(resolve => setTimeout(resolve, delay));\r\n}\r\n\r\nexport async function getPeople(): Promise<Person[]> {\r\n  // keep this delay for testing purpose\r\n  return wait(500)\r\n    .then(() => fetch(API_URL))\r\n    .then(response => response.json());\r\n}\r\n","import './Loader.scss';\r\n\r\nexport const Loader = () => (\r\n  <div className=\"Loader\" data-cy=\"loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import { Link } from 'react-router-dom';\nimport classnames from 'classnames';\nimport { Person } from '../types';\nimport { FEMALE_SEX } from '../utils/constants';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`/people/${person.slug}`}\n      className={classnames({\n        'has-text-danger': person.sex === FEMALE_SEX,\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children,\n  params,\n  ...props\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport classnames from 'classnames';\nimport { Person } from '../types';\nimport { NOT_SET_VALUE, tableColumnNames } from '../utils/constants';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\n\nconst sortTableColumnNames = ['Name', 'Sex', 'Born', 'Died'];\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n}) => {\n  const { personSlug } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const getSortedParams = (newSortType: string): SearchParams => {\n    if (sort !== newSortType) {\n      return {\n        sort: newSortType,\n        order: null,\n      };\n    }\n\n    if (sort === newSortType && !order) {\n      return { order: 'desc' };\n    }\n\n    return {\n      sort: null,\n      order: null,\n    };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {tableColumnNames.map((name) => {\n            return sortTableColumnNames.includes(name) ? (\n              <th key={name}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {name}\n                  <SearchLink params={getSortedParams(name.toLowerCase())}>\n                    <span className=\"icon\">\n                      <i\n                        className={classnames('fas', {\n                          'fa-sort': sort !== name.toLowerCase(),\n                          'fa-sort-up': sort === name.toLowerCase() && !order,\n                          'fa-sort-down': sort === name.toLowerCase() && order,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            ) : (\n              <th key={name}>\n                {name}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            sex,\n            born,\n            died,\n            fatherName,\n            motherName,\n            slug,\n            mother,\n            father,\n          } = person;\n\n          return (\n            <tr\n              data-cy=\"person\"\n              className={classnames({\n                'has-background-warning': slug === personSlug,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>\n                {mother\n                  ? <PersonLink person={mother} />\n                  : motherName || NOT_SET_VALUE}\n              </td>\n              <td>\n                {father\n                  ? <PersonLink person={father} />\n                  : fatherName || NOT_SET_VALUE}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","export enum Gender {\n  All = 'All',\n  Male = 'Male',\n  Female = 'Female',\n}\n","import { useSearchParams } from 'react-router-dom';\nimport classnames from 'classnames';\nimport { Gender } from '../types/Gender';\nimport { FEMALE_SEX, MALE_SEX } from '../utils/constants';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSeacrhParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const query = searchParams.get('query') || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSeacrhParams(\n      getSearchWith(searchParams, { query: event.target.value || null }),\n    );\n  };\n\n  const toggleCentury = (selectedNumber: string) => {\n    return centuries.includes(selectedNumber)\n      ? centuries.filter(century => century !== selectedNumber)\n      : [...centuries, selectedNumber];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classnames({ 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          {Gender.All}\n        </SearchLink>\n        <SearchLink\n          className={classnames({ 'is-active': sex === MALE_SEX })}\n          params={{ sex: MALE_SEX }}\n        >\n          {Gender.Male}\n        </SearchLink>\n        <SearchLink\n          className={classnames({ 'is-active': sex === FEMALE_SEX })}\n          params={{ sex: FEMALE_SEX }}\n        >\n          {Gender.Female}\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {['16', '17', '18', '19', '20'].map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classnames('button', 'mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{ centuries: toggleCentury(century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: [],\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport {\n  getFatherPerson,\n  getMotherPerson,\n  hasIncludeQuery,\n} from '../utils/utils';\nimport { PeopleFilters } from '../components/PeopleFilters';\n\nexport const PeoplePage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorHappened, setIsErrorHappened] = useState(false);\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const { search } = useLocation();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then((peopleFromServer) => {\n        setPeople(\n          peopleFromServer.map((personData) => {\n            const mother = getMotherPerson(\n              peopleFromServer, personData,\n            );\n            const father = getFatherPerson(\n              peopleFromServer, personData,\n            );\n\n            const person: Person = {\n              ...personData,\n              mother,\n              father,\n            };\n\n            return person;\n          }),\n        );\n      })\n      .catch(() => setIsErrorHappened(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const getFilteredPeople = () => {\n    const params = new URLSearchParams(search);\n\n    const sex = params.get('sex') || '';\n    const centuries = params.getAll('centuries') || [];\n    const query = params.get('query') || '';\n    const sort = params.get('sort') || '';\n    const order = params.get('order') || '';\n\n    let preparedPeople = [...people];\n\n    if (sex.length > 0) {\n      preparedPeople = preparedPeople.filter((person) => {\n        return person.sex === sex;\n      });\n    }\n\n    if (centuries.length > 0) {\n      preparedPeople = preparedPeople.filter(person => {\n        const numberOfCentury = Math.ceil(person.born / 100);\n\n        return centuries.includes(numberOfCentury.toString());\n      });\n    }\n\n    if (query) {\n      preparedPeople = preparedPeople.filter(person => {\n        return hasIncludeQuery(person.name, query)\n          || hasIncludeQuery((person.motherName || ''), query)\n          || hasIncludeQuery((person.fatherName || ''), query);\n      });\n    }\n\n    if (sort) {\n      preparedPeople.sort((a, b) => {\n        switch (sort) {\n          case 'name':\n          case 'sex':\n            return a[sort].localeCompare(b[sort]);\n          case 'born':\n          case 'died':\n            return a[sort] - b[sort];\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (order) {\n      preparedPeople.reverse();\n    }\n\n    return preparedPeople;\n  };\n\n  const isPeopleNotExist = !isLoading && !isErrorHappened && !people.length;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!!people.length && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isErrorHappened && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isPeopleNotExist && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!!people.length && (\n                <PeopleTable\n                  people={getFilteredPeople()}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  HashRouter as Router,\n  Navigate,\n  Routes,\n  Route,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { PeoplePage } from './pages/PeoplePage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":personSlug?\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n      <App />\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}